{
  "procedures": [
    {
      "name": "Start",
      "sequence": {
        "children": [
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "GenerateRearrayWorklists",
            "name": "Run Script",
            "description": "Run Script: GenerateRearrayWorklists",
            "helpText": "Runs the specified script",
            "guid": "82133575-5d2a-409f-bb64-0ad0d03f1437",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
            "sequence": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                  "left": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "GetRearrayContainer",
                              "name": "Run Script",
                              "description": "Run Script: GetRearrayContainer",
                              "helpText": "Runs the specified script",
                              "guid": "5ce950ce-3d37-4cd5-b879-c4b00c421b49",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: [REARRAY WORKLIST BEGIN]",
                              "text": "[REARRAY WORKLIST BEGIN]",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "fbb361aa-46c4-4f07-8c14-ddfe21a43779",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: %WORKLIST%",
                              "text": "%WORKLIST%",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "b5d0a93d-3a77-492c-80a1-6a91cdb54c5b",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: [REARRAY WORKLIST END]",
                              "text": "[REARRAY WORKLIST END]",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "1904f87c-293a-4ce1-a8fd-95bd0801299b",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: [PLACEHOLDER - REARRAY GBG TEMPLATE]",
                              "text": "[PLACEHOLDER - REARRAY GBG TEMPLATE]",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "b8d1af37-0682-4cd1-90f4-d287dc073ef1",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "UpdateVialLocations",
                              "name": "Run Script",
                              "description": "Run Script: UpdateVialLocations",
                              "helpText": "Runs the specified script",
                              "guid": "3dd9025b-24c7-4340-8816-da3a4e456af3",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "UpdateContainerWorklist",
                              "name": "Run Script",
                              "description": "Run Script: UpdateContainerWorklist",
                              "helpText": "Runs the specified script",
                              "guid": "9d421d29-2153-4a64-abeb-6527c3bd5e4f",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "c940d1af-fc38-4740-8e2f-7e5c56581ff3",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: [ALL RACKS PICKED]",
                              "text": "[ALL RACKS PICKED]",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "21a10848-5c83-4e1d-8211-a9f412f7421b",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "97e892a5-18f4-480f-aae3-ab35d8fd3664",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "LOOP_COUNTER",
                          "right": "%NUMBER_OF_RACKS%",
                          "evaluator": "LessThan"
                        },
                        "name": "Branch",
                        "description": "Branch if LOOP_COUNTER < %NUMBER_OF_RACKS%",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "323b5635-49e2-4824-843c-b92bdb0fe137",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "4a7da06f-4b0f-4164-892b-c03f90b002b7",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "right": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "GerTransportMetaData",
                              "name": "Run Script",
                              "description": "Run Script: GerTransportMetaData",
                              "helpText": "Runs the specified script",
                              "guid": "2fbbb2bb-eee8-41ee-ba01-a92d31bf79dd",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "10",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "WORKCELL_REARRAY_1",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "WORKCELL_DNA_1",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "%TRANSPORT_BARCODE%",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "%TRANSPORT_METADATA%",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Transport",
                              "description": "Transport",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "guid": "53a07051-ab4a-44f1-bf1a-a7b83698e2ee",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "backgroundColorHex": "#FF666666",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "4210d18c-0384-416e-8990-0405384fecdb",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "83baeeb6-f7de-4ce2-9411-ee82a7b836e7",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "LOOP_COUNTER",
                          "right": "0",
                          "evaluator": "GreaterThan"
                        },
                        "name": "Branch",
                        "description": "Branch if LOOP_COUNTER > 0",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "f4cdbb17-94ec-43a6-ab95-da98c8eb9953",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "7a2059c8-f302-42e7-938e-9d0272f070ac",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "name": "Parallel",
                  "description": "Parallel",
                  "helpText": "Executes two sequences in parallel",
                  "guid": "bc7aae05-2985-421e-b3e0-f512a992236c",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                  "backgroundColorHex": "#FF72EAFF",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                  "parameterName": "LOOP_COUNTER",
                  "leftOperand": "%LOOP_COUNTER%",
                  "isUnaryOperation": false,
                  "operator": "Add",
                  "rightOperand": "1",
                  "name": "Set Parameter",
                  "description": "LOOP_COUNTER = %LOOP_COUNTER% + 1",
                  "helpText": "Sets a parameter",
                  "guid": "c5822f0e-974b-440a-a7a5-f51899630f48",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                  "backgroundColorHex": "#FFA8E281",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "f9d437c8-af5c-4452-8821-f9f94d3d8804",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "evaluation": {
              "left": "LOOP_COUNTER",
              "right": "%NUMBER_OF_RACKS%",
              "evaluator": "LessThanOrEqual"
            },
            "evaluateAtEnd": true,
            "loopCount": 0,
            "loopType": "While",
            "foreachCollectionVariable": "",
            "foreachItemVariable": "",
            "foreachDelimiter": ",",
            "name": "Loop",
            "description": "Loop While LOOP_COUNTER ≤ %NUMBER_OF_RACKS% at end",
            "helpText": "A loop over a sequence of elements",
            "guid": "26647c60-7cf0-460b-ac42-bd58f5f9a543",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
            "backgroundColorHex": "#FF08EAA7",
            "isDisabled": false,
            "isPausePointSet": false
          }
        ],
        "name": "Sequence",
        "description": "Sequence",
        "helpText": "A sequence of workflow elements",
        "guid": "bedc603c-ae27-4c4e-a13b-6751fa85953b",
        "isAsync": false,
        "allowAsync": false,
        "backgroundColorHex": "#00000000",
        "isDisabled": false,
        "isPausePointSet": false
      }
    }
  ],
  "parameters": [
    {
      "name": "BARCODE",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LOOP_COUNTER",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "NUMBER_OF_RACKS",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SKIP",
      "value": "True",
      "valueType": "Boolean",
      "defaultValue": "True",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "PickListJSON",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "PICKLIST",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.CONTAINER_WORKLIST",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REARRAY_CONTAINERS",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "WORKLIST",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Output.CONTAINER_WORKLIST",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TRANSPORT_METADATA",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TRANSPORT_BARCODE",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    }
  ],
  "scripts": [
    {
      "name": "GenerateRearrayWorklists",
      "code": "#r CalLabIdentities.dll\r\n#r Inventory_Helper.dll\r\n#r CredentialManagement.dll\r\n#r Microsoft.Data.SqlClient.dll\r\n#r WorkflowHelper.dll\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing CalLabUtilities;\r\nusing Serilog;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class GenerateRearrayWorklists\r\n    {\r\n        private static ILogger log = new LoggerConfiguration().WriteTo.Console().CreateLogger();\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n        \t    \r\n        \t    string json = context.GetGlobalVariableValue<string>(\"Input.CONTAINER_WORKLIST\");\r\n        \r\n            var rearray_containers =  MetaDataProcessor.ProcessRearray(json);\r\n            \r\n            Console.WriteLine(rearray_containers);\r\n            \r\n            List<StorageContainer> containers = JsonConvert.DeserializeObject<List<StorageContainer>>(rearray_containers);\r\n            \r\n            var number_of_racks = containers.Count;\r\n            \r\n            await context.UpdateGlobalVariableAsync(\"NUMBER_OF_RACKS\", number_of_racks);\r\n            \r\n            await context.UpdateGlobalVariableAsync(\"REARRAY_CONTAINERS\", rearray_containers);\r\n\r\n\r\n            \r\n        }\r\n\r\n\r\n    }\r\n}\r\n",
      "language": "C#"
    },
    {
      "name": "GetBarcode",
      "code": "#r CalLabIdentities.dll\r\n#r WorkflowHelper.dll\r\nusing System;\r\nusing System.Linq;\r\n\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing CalLabUtilities;\r\n\r\nusing Serilog;\r\nusing Serilog.Sinks;\r\nusing Serilog.Sinks.SystemConsole.Themes;\r\n\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class GetBarcode\r\n    {\r\n        private static ILogger log = new LoggerConfiguration().WriteTo.Console().CreateLogger();\r\n        \r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            var jsonString = context.GetGlobalVariableValue<string>(\"PickListJSON\");\r\n            var index = context.GetGlobalVariableValue<int>(\"LOOP_COUNTER\");\r\n            \r\n            var pickListData = BarcodeManager.GetPickListDataAtIndex(jsonString, index);\r\n            \r\n            if (pickListData.HasValue)\r\n            {\r\n                var (barcode, picklist) = pickListData.Value;\r\n                \r\n                await context.UpdateGlobalVariableAsync(\"BARCODE\", barcode, cancellationToken);\r\n                await context.UpdateGlobalVariableAsync(\"PICKLIST\", picklist, cancellationToken);\r\n                \r\n                log.Information($\"Generating Picklist for Barcode: {barcode}\");\r\n                Console.WriteLine(picklist);\r\n            }\r\n            else\r\n            {\r\n                log.Information(\"Picklist data not found for the given index.\");\r\n            }\r\n\r\n           // return Task.CompletedTask;\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "GetRearrayContainer",
      "code": "#r CalLabIdentities.dll\r\n#r Inventory_Helper.dll\r\n#r CredentialManagement.dll\r\n#r Microsoft.Data.SqlClient.dll\r\n#r WorkflowHelper.dll\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing CalLabUtilities;\r\nusing Serilog;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class GetRearrayContainer\r\n    {\r\n        private static ILogger log = new LoggerConfiguration().WriteTo.Console().CreateLogger();\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string rearray_containers = context.GetGlobalVariableValue<string>(\"REARRAY_CONTAINERS\");\r\n            \r\n            \r\n                 \r\n            var idx = context.GetGlobalVariableValue<int>(\"LOOP_COUNTER\");\r\n            \r\n            var rearray_container_worklist = MetaDataProcessor.GetRearrayContainer(rearray_containers, idx);\r\n            \r\n            await context.UpdateGlobalVariableAsync(\"WORKLIST\", rearray_container_worklist);\r\n    \r\n\r\n          \r\n        }\r\n    }\r\n}\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "UpdateContainerWorklist",
      "code": "#r CalLabIdentities.dll\r\n#r Inventory_Helper.dll\r\n#r CredentialManagement.dll\r\n#r Microsoft.Data.SqlClient.dll\r\n#r WorkflowHelper.dll\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing CalLabUtilities;\r\nusing Serilog;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class UpdateContainerWorklist\r\n    {\r\n        private static ILogger log = new LoggerConfiguration().WriteTo.Console().CreateLogger();\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string worklist = context.GetGlobalVariableValue<string>(\"WORKLIST\");\r\n            \r\n            string input_container_worklist = context.GetGlobalVariableValue<string>(\"Input.CONTAINER_WORKLIST\");\r\n            \r\n            var updated_worklist = MetaDataProcessor.UpdateJSONWorklistWithRearrayRackBarcodes(input_container_worklist, worklist);\r\n            \r\n            await context.UpdateGlobalVariableAsync(\"Input.CONTAINER_WORKLIST\", updated_worklist);\r\n            \r\n            await context.UpdateGlobalVariableAsync(\"Output.CONTAINER_WORKLIST\", updated_worklist);\r\n\r\n           // return Task.CompletedTask;\r\n        }\r\n    }\r\n    \r\n    \r\n    public class RearrayPickList\r\n    {\r\n        public string AnchorBarcode {get; set;}\r\n        public string SourceBarcode {get;set;}\r\n        public string ContainerType {get; set;}\r\n        public string PROCESS_LABWARE {get; set;}\r\n        public string WorkList {get;set;}\r\n\r\n    }\r\n}\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "GerTransportMetaData",
      "code": "\r\n\r\n#r CalLabIdentities.dll\r\n#r Inventory_Helper.dll\r\n#r CredentialManagement.dll\r\n#r Microsoft.Data.SqlClient.dll\r\n#r WorkflowHelper.dll\r\n\r\nusing System;\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing CalLabUtilities;\r\nusing Serilog;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class GerTransportMetaData\r\n    {\r\n        private static ILogger log = new LoggerConfiguration().WriteTo.Console().CreateLogger();\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string rearray_containers = context.GetGlobalVariableValue<string>(\"REARRAY_CONTAINERS\");\r\n            \r\n            \r\n                 \r\n            var idx = context.GetGlobalVariableValue<int>(\"LOOP_COUNTER\");\r\n            idx = idx-1;\r\n            \r\n            var rearray_container_worklist = MetaDataProcessor.GetRearrayContainer(rearray_containers, idx);\r\n            \r\n            var rearray_picklist = JsonConvert.DeserializeObject<List<RearrayPickList>>(rearray_container_worklist);\r\n            \r\n            var plate_id = rearray_picklist[0].AnchorBarcode;\r\n            \r\n\r\n            \r\n            Console.WriteLine($\"[GENERATING TRANSPORT META DATA - {plate_id}]\");\r\n            \r\n            //Console.WriteLine(rearray_container_worklist);\r\n            \r\n             string json = context.GetGlobalVariableValue<string>(\"Input.CONTAINER_WORKLIST\");\r\n          \r\n             var transport_meta_data = MetaDataProcessor.GetRearrayTransportMetaData(plate_id, json);\r\n              \r\n   \r\n              \r\n              await context.UpdateGlobalVariableAsync(\"TRANSPORT_METADATA\",transport_meta_data );\r\n              \r\n              await context.UpdateGlobalVariableAsync(\"TRANSPORT_BARCODE\", plate_id);\r\n            \r\n           \r\n             \r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    \r\n}\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "UpdateVialLocations",
      "code": "#r CalLabIdentities.dll\r\n#r Inventory_Helper.dll\r\n#r CredentialManagement.dll\r\n#r Microsoft.Data.SqlClient.dll\r\n#r WorkflowHelper.dll\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing CalLabUtilities;\r\nusing Serilog;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class UpdateVialLocations\r\n    {\r\n        private static ILogger log = new LoggerConfiguration().WriteTo.Console().CreateLogger();\r\n\r\n        public Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n        \r\n        \t    \tvar worklist = context.GetGlobalVariableValue<string>(\"WORKLIST\");\r\n        \t     \r\n \t    \tMetaDataProcessor.UpdateVialLocations(worklist);\r\n\r\n                return Task.CompletedTask;\r\n        }\r\n    }\r\n}\r\n\r\n",
      "language": "C#"
    }
  ],
  "globalScriptReferences": [
    "Biosero.Workflow.Core.dll",
    "Biosero.DataModels.dll"
  ],
  "screens": [],
  "deviceRequirements": [],
  "iconUrl": "PackIcon.CodeArray [#FFFFFF:0:0]",
  "color": "#0000FF",
  "name": "Rearray",
  "category": "UpdateTemplates",
  "lastModified": "0001-01-01T00:00:00+00:00",
  "parameterReferenceIndicator": "%"
}